openapi: 3.0.2
info:
  version: 1.0.0
  title: KBIN
  description: "This is the Open API documentation for the REST API of our beloved application **KBIN** deployed at <https://3.90.39.111:8080>."
servers:
  - url: 'http://18.208.188.141:8080'
paths:
  /articles:
    post:
      tags:
      - articles
      summary: Create a new article
      operationId: createArticle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
              - title
              - body
              - article_type
              - user_id
              - magazine_id
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
                article_type:
                  type: string
                url:
                  type: string
                user_id:
                  type: integer
                magazine_id:
                  type: integer
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleComplete'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
      security:
      - ApiKeyAuth: []
    get:
      tags:
      - articles
      summary: Retrieves all articles
      operationId: getAllArticles
      parameters:
        - name: type
          in: query
          description: Filter articles by type (e.g., all, link or thread).
          schema:
            type: string
            enum: [all, link, thread]
          example: all
        - name: order_filter
          in: query
          description: Order articles by order_filter (e.g. newest, top or commented).
          schema:
            type: string
            enum: [newest, top, commented]
          example: newest
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
  /articles/{id}:
    get:
      tags:
      - articles
      summary: Retrieves a specific article by ID
      operationId: getArticleById
      parameters:
      - name: id
        in: path
        description: ID of article to return
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleComplete'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    patch:
      tags:
      - articles
      summary: Updates a specific article by ID
      operationId: updateArticleById
      parameters:
      - name: id
        in: path
        description: ID of article to update
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
                article_type:
                  type: string
                url:
                  type: string
                magazine_id:
                  type: integer
      responses:
        '200':
          description: Article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleComplete'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
      - ApiKeyAuth: []
    delete:
      tags:
      - articles
      summary: Deletes a specific article by ID
      operationId: deleteArticleById
      parameters:
      - name: id
        in: path
        description: ID of article to delete
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: No content
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
      - ApiKeyAuth: []
  /articles/{id}/boost:
    post:
      tags:
        - articles
      summary: Boost an article
      operationId: boostArticle
      parameters:
        - name: id
          in: path
          description: ID of the article to boost
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleComplete'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
      - ApiKeyAuth: []
  /articles/search:
    get:
      tags:
        - articles
      summary: Search articles by title or body
      operationId: searchArticles
      parameters:
        - name: search_text
          in: query
          description: Text to search for in article titles or bodies
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  /vote_articles:
    get:
      tags:
        - vote_articles
      summary: Retrieves all vote articles
      operationId: getAllVoteArticles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VoteArticle'
    post:
      tags:
        - vote_articles
      summary: Creates a new vote article
      operationId: createVoteArticle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVoteArticle'
      responses:
        '201':
          description: Vote article created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteArticle'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
      - ApiKeyAuth: []
  /vote_articles/{id}:
    get:
      tags:
        - vote_articles
      summary: Retrieves a specific vote article by ID
      operationId: getVoteArticleById
      parameters:
        - name: id
          in: path
          description: ID of the vote article to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteArticle'
        '404':
          description: Vote article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    put:
      tags:
        - vote_articles
      summary: Updates a specific vote article by ID
      operationId: updateVoteArticleById
      parameters:
        - name: id
          in: path
          description: ID of the vote article to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVoteArticle'
      responses:
        '200':
          description: Vote article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteArticle'
        '404':
          description: Vote article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
      - ApiKeyAuth: []
    delete:
      tags:
        - vote_articles
      summary: Deletes a specific vote article by ID
      operationId: deleteVoteArticleById
      parameters:
        - name: id
          in: path
          description: ID of the vote article to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Vote article deleted successfully
        '404':
          description: Vote article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      security:
      - ApiKeyAuth: []
components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Article Title
        body:
          type: string
          example: Article Body Content
        article_type:
          type: string
          example: Thread
        url:
          type: string
          example: http://example.com
        votes_up:
          type: integer
          example: 10
        votes_down:
          type: integer
          example: 2
        num_boosts:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-05-14T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-05-14T12:00:00Z"
        magazine_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
    ArticleComplete:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Article Title
        body:
          type: string
          example: Article Body Content
        article_type:
          type: string
          enum: [link, thread]
          example: Thread
        url:
          type: string
          example: http://example.com
        votes_up:
          type: integer
          example: 10
        votes_down:
          type: integer
          example: 2
        num_boosts:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-05-14T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-05-14T12:00:00Z"
        magazine:
          $ref: '#/components/schemas/MagazineArticle'
        user:
          $ref: '#/components/schemas/UserArticle'
        vote_articles:
          type: array
          items:
            $ref: '#/components/schemas/VoteArticleArticle'
        boosts:
          type: array
          items:
            $ref: '#/components/schemas/BoostArticle'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentArticle'
    VoteArticle:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        article_id:
          type: integer
        value:
          type: string
      required:
        - user_id
        - article_id
    NewVoteArticle:
      type: object
      properties:
        user_id:
          type: integer
        article_id:
          type: integer
        value:
          type: string
      required:
        - user_id
        - article_id
        - value
    UpdateVoteArticle:
      type: object
      properties:
        value:
          type: string
      required:
        - value
    MagazineArticle:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    UserArticle:
      type: object
      properties:
        id:
          type: integer
        full_name:
          type: string
        email:
          type: string
    VoteArticleArticle:
      type: object
      properties:
        id:
          type: integer
        value:
          type: string
        created_at:
          type: string
          format: date-time
    BoostArticle:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
        created_at:
          type: string
          format: date-time
    CommentArticle:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
        parent_id:
          type: string
        body:
          type: string
        created_at:
          type: string
          format: date-time
    ErrorResult:
      type: object
      properties:
        message:
          type: string
          example: 'Content is too long (maximum is 280 characters)'
      required:
        - message
  examples:
    error400:
      value:
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        message: "You provided no token"
    error403:
      value:
        message: "You provided an invalid token"
    error404:
      value:
        message: "There is no tweet with 'id'=8"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header