openapi: 3.0.2
info:
  version: 1.0.0
  title: Wall of Tweets
  description: "This is the Open API documentation for the REST API of our beloved application **Wall of Tweets** deployed at <https://fib-asw-wotapi.fly.dev/>. <br>All operations are executable. Only one operation requires authentication: `deleteTweet`. In this case, you must **Authorize** your request by providing the token value you got when you created the tweet."
servers:
  - url: 'https://fib-asw-wotapi.fly.dev/'
paths:
  /tweets:
    post:
      tags:
      - tweets
      summary: Adds a new Tweet to the Wall of Tweets
      operationId: addTweet
      requestBody:
        description: Provide the author & content of the new Tweet
        content:
          application/json:
            schema:
              required:
              - author
              - content
              type: object
              properties:
                author:
                  type: string
                  minLength: 4
                  example: 'My name'
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Tweet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewTweet'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
    get:
      tags:
      - tweets
      summary: Retrieves all the Tweets
      operationId: getAllTweets
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
  /tweets/{tweetId}:
    get:
      tags:
      - tweets
      summary: Finds a Tweet by its ID
      description: Returns a single Tweet
      operationId: getTweetById
      parameters:
      - name: tweetId
        in: path
        description: ID of Tweet to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
      - tweets
      summary: If the Tweet exists, deletes it if the token is present and valid. If it does not exist, returns 204 No Content.
      operationId: deleteTweet
      parameters:
      - name: tweetId
        in: path
        description: Tweet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: No content
          content:
            application/json: {}
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
  /tweets/{tweetId}/likes:
    post:
      tags:
      - tweets
      summary: Likes a Tweet
      operationId: likeTweet
      parameters:
      - name: tweetId
        in: path
        description: Tweet id to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Liked Tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'




  /article/{articleId}/comments:
    get:
      tags:
      - comments
      summary: Retrieves all the comments of an article
      parameters:
      - name: articleId
        in: path
        description: ID of Article to search
        required: true
        schema:
          type: integer
          format: int64
      - name: order
        in: query
        description: Order in which to return the comments. Can be 'oldest', 'newest', or default (most voted).
        required: false
        schema:
          type: string
          enum: ['oldest', 'newest']
    post:
      tags:
      - comments
      summary: Creates a comment in an article
      parameters:
      - name: articleId
        in: path
        description: ID of Article to search
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Provide the content of the Tweet
        content:
          application/json:
            schema:
              required:
              - body
              type: object
              properties:
                body:
                  type: string
                  example: 'commentPostMan'
                parent_id:
                  type: integer
                  example: 7
                  description: 'ID of the parent comment'
        required: true
  /artice/{articleId}/comments/{commentId}:
    patch:
      tags:
      - comments
      summary: Updates a comment in an article
      parameters:
      - name: articleId
        in: path
        description: ID of Article to search
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Provide the new body for the comment
        content:
          application/json:
            schema:
              required:
              - body
              type: object
              properties:
                body:
                  type: string
                  example: 'editedCommentPostMan'
        required: true









components:
  schemas:
    Tweet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        author:
          type: string
          minLength: 4
          example: 'My name'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'My content'
        likes:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://fib-asw-wotapi.fly.dev/tweets/2'
    NewTweet:
      allOf:
        - $ref: '#/components/schemas/Tweet'
        - type: object
          properties:
            token:
              type: string
              example: '9656f8894781485f7e9e168584a17ec002ad77379a3e2b3ff4604b916d98c0a7'
          required:
            - token
    ErrorResult:
      type: object
      properties:
        message: 
          type: string
          example: 'Content is too long (maximum is 280 characters)'
      required:
        - message
  examples:
    error400:
      value:
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        message: "You provided no token"
    error403:
      value:
        message: "You provided an invalid token"
    error404:
      value:
        message: "There is no tweet with 'id'=8"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header